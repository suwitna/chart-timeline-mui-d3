'use client';

import { useEffect, useState } from 'react';
import { Box, Typography, CircularProgress } from '@mui/material';
import { MachineItem } from '@/components/MachineItem';
import { GroupedMachineLog } from '@/types/machine';
import dayjs from 'dayjs';

const formatDateRange = (start: string, days: number) => {
    const startDay = dayjs(start);
    const endDay = startDay.add(days - 1, 'day');
    const startFormatted = startDay.format('DD/MM/YYYY');
    const endFormatted = endDay.format('DD/MM/YYYY');
    return days > 1 ? `${startFormatted} - ${endFormatted}` : startFormatted;
  };

export default function DemoPage() {
  const [logs, setLogs] = useState<GroupedMachineLog[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');

  const startDate = '2025-08-30';
  const numDays = 1;

  useEffect(() => {
    const fetchData = async () => {
      try {
        const params = new URLSearchParams({
          date: startDate,
          days: String(numDays),
        });

        const res = await fetch(`/api/json-log?${params.toString()}`);
        if (!res.ok) throw new Error('‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');

        const data = await res.json();
        setLogs(data);
      } catch (err) {
        setError('‚ùå ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß');
      } finally {
        setLoading(false);
      }
    };

    fetchData();
  }, []);

  if (loading) {
    return (
      <Box display="flex" justifyContent="center" alignItems="center" minHeight="30vh">
        <CircularProgress />
      </Box>
    );
  }

  if (error) {
    return (
      <Typography color="error" p={2}>
        {error}
      </Typography>
    );
  }

  return (
    <Box p={2}>
      <Typography variant="h6" fontWeight="bold" mb={2}>
        üß™ Timeline (‡πÇ‡∏´‡∏•‡∏î‡∏à‡∏≤‡∏Å API)
      </Typography>

      {logs.map((log, i) => (
        <Box
          key={i}
          display="flex"
          alignItems="stretch"
          gap={2}
          mb={2}
          sx={{
            minHeight: 100,
            border: '1px solid #ccc',
            borderRadius: 1,
            backgroundColor: '#f9f9f9',
          }}
        >
          {/* Column 1: ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á */}
          <Box sx={{ width: 200, padding: 1.5, color: 'gray' }}>
            <Typography noWrap fontSize="0.8rem" fontWeight="bold">
              {log.machine}
            </Typography>
            <Typography fontSize="0.75rem" color="text.secondary" mt={0.3}>
              {formatDateRange(startDate, numDays)}
            </Typography>
          </Box>

          {/* Column 2: ‡∏Å‡∏£‡∏≤‡∏ü timeline */}
          <Box
            sx={{
              flexGrow: 1,
              overflow: 'hidden',
              whiteSpace: 'nowrap',
              textOverflow: 'ellipsis',
            }}
          >
            <MachineItem
              log={log}                     // (1) ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• JSON
              startDate={startDate}         // (2) ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô YYYY-MM-DD
              numDays={numDays}             // (3) ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ 
              chartHeight={50}              // (4) ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß Timeline
              startHour="08:00:00"          // (5) ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ô
              endHour="08:00:00"            // (6) ‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ô
              showTooltip={true}            // (7) ‡πÅ‡∏™‡∏î‡∏á‡∏ó‡∏π‡∏•‡∏ó‡∏¥‡∏õ
              showTimeScale={true}          // (8) ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏ß‡∏•‡∏≤
              highlightRanges = {[          // (9) ‡πÄ‡∏ß‡∏•‡∏≤‡∏û‡∏±‡∏Å
                    { start: '00:00:00', end: '01:00:00', color: '#FFD600' },
                    { start: '03:00:00', end: '03:15:00', color: '#FFD600' },
                    { start: '05:00:00', end: '05:30:00', color: '#FFD600' },
                    { start: '10:00:00', end: '10:15:00', color: '#FFD600' },
                    { start: '12:00:00', end: '13:00:00', color: '#FFD600' },
                    { start: '17:00:00', end: '17:30:00', color: '#FFD600' },
                    { start: '22:00:00', end: '22:15:00', color: '#FFD600' },
                ]}
              statusColorMap = {{           // (10) ‡∏™‡∏µ‡∏Ç‡∏≠‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ï‡πà‡∏≤‡∏á
                    Run: '#509151ff',
                    Stop: '#c9665fff',
                    UNDEFINED: '#3c3c3cff',
                }}
              paddingLeft={30}              // (11) ‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ö‡∏Ç‡∏≠‡∏ö‡∏ó‡∏≤‡∏á‡∏ã‡πâ‡∏≤‡∏¢
              paddingRight={30}             // (12) ‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏Å‡∏±‡∏ö‡∏Ç‡∏≠‡∏á‡∏ó‡∏≤‡∏á‡∏Ç‡∏ß‡∏≤
              showDuration={true}           // (13) ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏ß‡∏•‡∏≤ UNDEFINED
              showTotalTime={false}         // (14) ‡πÄ‡∏ß‡∏•‡∏≤ UNDEFINED‡∏° 
                                            // true ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏£‡∏ß‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡∏û‡∏±‡∏Å, 
                                            // false ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ô‡∏±‡∏ö‡πÉ‡∏´‡∏°‡πà‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏û‡∏±‡∏Å
            />
          </Box>
        </Box>
      ))}
    </Box>
  );
}
